{"version":3,"sources":["components/SearchDropDown.js","components/Pagination.js","components/Info.js","components/CountryCard.js","App.js","registerServiceWorker.js","index.js"],"names":["SearchDropDown","search","countries","clickHandler","className","hidden","length","map","cca2","code2","region","name","onClick","country","format","pngSize","basePath","common","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","props","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","state","pageNeighbours","handleMoveRight","fetchPageNumbers","goTo","totalNumbers","startPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","extraPages","ceil","this","aria-label","index","href","aria-hidden","Component","Info","info","title","CountryCard","showFullInfo","code","capital","currency","languages","showFull","id","Object","values","lang","idx","App","allCountries","currentCountries","current","data","offset","slice","handleChange","ev","target","value","searchClickHandler","countryId","forEach","floor","Countries","findAll","totalCountries","filteredCountries","filter","toLowerCase","includes","headerClass","join","trim","closest","type","onChange","cca3","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.61eeb305.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Flag from \"react-flags\";\r\n\r\nconst SearchDropDown = ({ search, countries, clickHandler }) => {\r\n  return (\r\n    <div\r\n      className=\"search-dropdown\"\r\n      hidden={countries.length && search ? false : true}\r\n    >\r\n      {countries.map(({ cca2: code2 = \"\", region = null, name = {} }) => (\r\n        <div\r\n          className=\"search-item\"\r\n          key={code2}\r\n          onClick={() => {\r\n            clickHandler(code2);\r\n          }}\r\n        >\r\n          <Flag\r\n            country={code2}\r\n            format=\"png\"\r\n            pngSize={64}\r\n            basePath=\"./img/flags\"\r\n            className=\"d-block h-100\"\r\n          />\r\n          <div className=\"search-item-content\">\r\n            <h3>{name.common}</h3>\r\n            <h5>{region}</h5>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchDropDown;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LEFT_PAGE = \"LEFT\";\r\nconst RIGHT_PAGE = \"RIGHT\";\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n};\r\n\r\nclass Pagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      totalRecords = null,\r\n      pageLimit = 30,\r\n      pageNeighbours = 0,\r\n      goTo = 1,\r\n    } = props;\r\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\r\n\r\n    // pageNeighbours can be: 0, 1 or 2\r\n    this.pageNeighbours =\r\n      typeof pageNeighbours === \"number\"\r\n        ? Math.max(0, Math.min(pageNeighbours, 2))\r\n        : 0;\r\n    this.goTo = typeof goTo === \"number\" ? goTo : 1;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n    this.state = { currentPage: this.goTo };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.gotoPage(this.goTo);\r\n  }\r\n  gotoPage = (page) => {\r\n    const { onPageChanged = (f) => f } = this.props;\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n    const paginationData = {\r\n      currentPage,\r\n      totalPages: this.totalPages,\r\n      pageLimit: this.pageLimit,\r\n      totalRecords: this.totalRecords,\r\n    };\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n  };\r\n\r\n  handleClick = (page) => (evt) => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  };\r\n\r\n  handleMoveLeft = (evt) => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\r\n  };\r\n\r\n  handleMoveRight = (evt) => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\r\n  };\r\n\r\n  /**\r\n   * Let's say we have 10 pages and we set pageNeighbours to 2\r\n   * Given that the current page is 6\r\n   * The pagination control will look like the following:\r\n   *\r\n   * (1) < {4 5} [6] {7 8} > (10)\r\n   *\r\n   * (x) => terminal pages: first and last page(always visible)\r\n   * [x] => represents current page\r\n   * {...x} => represents page neighbours\r\n   */\r\n  fetchPageNumbers = () => {\r\n    const totalPages = this.totalPages;\r\n    let currentPage = this.state.currentPage;\r\n    currentPage = this.props.goTo;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    /**\r\n     * totalNumbers: the total page numbers to show on the control\r\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n     */\r\n    const totalNumbers = this.pageNeighbours * 2 + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n\r\n      let pages = range(startPage, endPage);\r\n\r\n      /**\r\n       * hasLeftSpill: has hidden pages to the left\r\n       * hasRightSpill: has hidden pages to the right\r\n       * spillOffset: number of hidden pages either to the left or to the right\r\n       */\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = totalPages - endPage > 1;\r\n      const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n      switch (true) {\r\n        // handle: (1) < {5 6} [7] {8 9} (10)\r\n        case hasLeftSpill && !hasRightSpill: {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) {2 3} [4] {5 6} > (10)\r\n        case !hasLeftSpill && hasRightSpill: {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) < {4 5} [6] {7 8} > (10)\r\n        case hasLeftSpill && hasRightSpill:\r\n        default: {\r\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n    }\r\n\r\n    return range(1, totalPages);\r\n  };\r\n\r\n  render() {\r\n    if (!this.totalRecords || this.totalPages === 1) return null;\r\n\r\n    let { currentPage } = this.state;\r\n    currentPage = this.props.goTo;\r\n    const pages = this.fetchPageNumbers();\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Countries Pagination\">\r\n          <ul className=\"pagination\">\r\n            {pages.map((page, index) => {\r\n              if (page === LEFT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Previous\"\r\n                      onClick={this.handleMoveLeft}\r\n                    >\r\n                      <span aria-hidden=\"true\">&laquo;</span>\r\n                      <span className=\"sr-only\">Previous</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n\r\n              if (page === RIGHT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Next\"\r\n                      onClick={this.handleMoveRight}\r\n                    >\r\n                      <span aria-hidden=\"true\">&raquo;</span>\r\n                      <span className=\"sr-only\">Next</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={`page-item${\r\n                    currentPage === page ? \" active\" : \"\"\r\n                  }`}\r\n                >\r\n                  <a\r\n                    className=\"page-link\"\r\n                    href=\"#\"\r\n                    onClick={this.handleClick(page)}\r\n                  >\r\n                    {page}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func,\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nconst Info = ({ info, title }) => {\r\n  return (\r\n    <div className=\"title\">\r\n      {title}: <span className=\"info\">{info}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport Info from \"./Info\";\r\nimport PropTypes from \"prop-types\";\r\nimport Flag from \"react-flags\";\r\n\r\nconst CountryCard = ({ country, showFullInfo, clickHandler, code }) => {\r\n  const {\r\n    cca2: code2 = \"\",\r\n    capital,\r\n    currency,\r\n    languages,\r\n    region = null,\r\n    name = {},\r\n  } = country || {};\r\n  const showFull = showFullInfo === code2 || code === code2;\r\n  return (\r\n    <div\r\n      className={`country-card ${showFull ? \"show-full-info\" : \"\"}`}\r\n      onClick={() => clickHandler(code2)}\r\n    >\r\n      <div className={`${showFull ? \"w-50 flex-column\" : \"h-100\"}  d-flex`}>\r\n        <div\r\n          className={`${\r\n            showFull ? \"w-100 h-maxCont\" : \"h-100\"\r\n          }  border-gray px-2 bg-white rounded-left`}\r\n        >\r\n          <Flag\r\n            country={code2}\r\n            format=\"png\"\r\n            pngSize={64}\r\n            basePath=\"./img/flags\"\r\n            className={`${showFull ? \"w-100\" : \"h-100\"} d-block`}\r\n          />\r\n        </div>\r\n        <div\r\n          className={`d-flex flex-column justify-content-center ${\r\n            showFull ? \"align-items-center mt-2\" : \"pl-3\"\r\n          }`}\r\n        >\r\n          <span className=\"country-name text-dark font-weight-bold mb-2\">\r\n            {name.common}\r\n          </span>\r\n          <span className=\"country-region text-secondary text-uppercase\">\r\n            {region}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex flex-column justify-content-center pl-3\">\r\n        <div hidden={!showFull}>\r\n          {[capital, currency].map((info, id) => (\r\n            <Info key={id} info={info} title={[\"Capital\", \"Currency\"][id]} />\r\n          ))}\r\n          <div className=\"d-flex flex-row flex-wrap\">\r\n            <span className=\"country-name text-dark font-weight-bold\">{`Languages: `}</span>\r\n            <ul>\r\n              {Object.values(languages).map((lang, idx) => (\r\n                <li className=\"country-name\" key={idx}>\r\n                  {`${lang}`}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountryCard.propTypes = {\r\n  country: PropTypes.shape({\r\n    cca2: PropTypes.string.isRequired,\r\n    region: PropTypes.string.isRequired,\r\n    name: PropTypes.shape({\r\n      common: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CountryCard;\r\n// const [ShouldUpdate, setShould] = useState(showFullInfo === code2);\r\n// useEffect(() => {setShould(showFullInfo === code2)}, [ShouldUpdate]);\r\n// console.log(\"UPDATED\");\r\n/* <div className=\"d-flex flex-row mb-1\">\r\n            <span className=\"country-name text-dark font-weight-bold\">\r\n              Capital:{\" \"}\r\n            </span>\r\n            <span className=\"country-name\">{capital}</span>\r\n          </div>\r\n          <div className=\"d-flex flex-row mb-1\">\r\n            <span className=\"country-name text-dark font-weight-bold\">\r\n              Currency:{\" \"}\r\n            </span>\r\n            <span className=\"country-name\">{currency}</span>\r\n          </div> */\r\n/* <div className=\"px-3 d-flex flex-column\">\r\n          <div className=\"d-flex flex-row mb-1\">\r\n            <span className=\"country-name text-dark font-weight-bold\">\r\n              Capital:{\" \"}\r\n            </span>\r\n            <span className=\"country-name\">{capital}</span>\r\n          </div>\r\n          <div className=\"d-flex flex-row mb-1\">\r\n            <span className=\"country-name text-dark font-weight-bold\">\r\n              Currency:{\" \"}\r\n            </span>\r\n            <span className=\"country-name\">{currency}</span>\r\n          </div>\r\n          <div className=\"d-flex flex-row flex-wrap\">\r\n            <span className=\"country-name text-dark font-weight-bold\">{`Languages: `}</span>\r\n\r\n            {Object.values(languages).map((lang, idx) => (\r\n              <span className=\"country-name\" key={idx}>\r\n                {`${lang} `}\r\n              </span>\r\n            ))}\r\n          </div> \r\n         </div> */\r\n","import React, { Component } from \"react\";\r\nimport Countries from \"countries-api\";\r\nimport \"./App.css\";\r\nimport SearchDropDown from \"./components/SearchDropDown\";\r\n\r\nimport Pagination from \"./components/Pagination\";\r\nimport CountryCard from \"./components/CountryCard\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    allCountries: [],\r\n    currentCountries: [],\r\n    currentPage: null,\r\n    totalPages: null,\r\n    showFullInfo: \"\",\r\n    current: \"\",\r\n    search: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { data: allCountries = [] } = Countries.findAll();\r\n    this.setState({ allCountries });\r\n  }\r\n\r\n  onPageChanged = (data) => {\r\n    const { allCountries } = this.state;\r\n    const { currentPage, totalPages, pageLimit } = data;\r\n\r\n    const offset = (currentPage - 1) * pageLimit;\r\n    const currentCountries = allCountries.slice(offset, offset + pageLimit);\r\n\r\n    this.setState({ currentPage, currentCountries, totalPages });\r\n  };\r\n  clickHandler = (code2) => {\r\n    this.setState({ showFullInfo: code2, current: \"\" });\r\n  };\r\n  handleChange = (ev) => {\r\n    this.setState({ search: ev.target.value });\r\n  };\r\n\r\n  searchClickHandler = (code) => {\r\n    const { allCountries } = this.state;\r\n    let countryId;\r\n    allCountries.forEach((country, id) => {\r\n      if (country.cca2 === code) countryId = id;\r\n    });\r\n    const currentPage = Math.floor(countryId / 18) + 1;\r\n    const offset = (currentPage - 1) * 18;\r\n    const currentCountries = allCountries.slice(offset, offset + 18);\r\n    this.setState({ currentPage, currentCountries, current: code, search: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      allCountries,\r\n      currentCountries,\r\n      currentPage,\r\n      totalPages,\r\n      search,\r\n      showFullInfo,\r\n      current,\r\n    } = this.state;\r\n    const totalCountries = allCountries.length;\r\n    if (totalCountries === 0) return null;\r\n    const filteredCountries = allCountries.filter((country) => {\r\n      return country.name.common.toLowerCase().includes(search.toLowerCase());\r\n    });\r\n    const headerClass = [\r\n      \"text-dark py-2 pr-4 m-0\",\r\n      currentPage ? \"border-gray border-right\" : \"\",\r\n    ]\r\n      .join(\" \")\r\n      .trim();\r\n    return (\r\n      <div\r\n        onClick={(ev) => {\r\n          if (!ev.target.closest(\".search-box\")) this.setState({ search: \"\" });\r\n        }}\r\n        className=\"container mb-5\"\r\n      >\r\n        <div className=\"row d-flex flex-row py-5\">\r\n          <div className=\"w-100 px-4 py-5 d-flex flex-row flex-wrap align-items-center justify-content-between\">\r\n            <div className=\"d-flex flex-row align-items-center\">\r\n              <h2 className={headerClass}>\r\n                <strong className=\"text-secondary\">{totalCountries}</strong>{\" \"}\r\n                Countries\r\n              </h2>\r\n\r\n              {currentPage && (\r\n                <span className=\"current-page d-inline-block h-100 pl-4 text-secondary\">\r\n                  Page <span className=\"font-weight-bold\">{currentPage}</span> /{\" \"}\r\n                  <span className=\"font-weight-bold\">{totalPages}</span>\r\n                </span>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"d-flex flex-row py-4 align-items-center\">\r\n              <Pagination\r\n                totalRecords={totalCountries}\r\n                pageLimit={18}\r\n                pageNeighbours={1}\r\n                goTo={currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n              />\r\n            </div>\r\n            <div className=\"search-box position-relative\">\r\n              <input type=\"search\" onChange={(ev) => this.handleChange(ev)} />\r\n              <SearchDropDown\r\n                countries={filteredCountries}\r\n                search={search}\r\n                clickHandler={this.searchClickHandler}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"country-cards\">\r\n            {currentCountries.map((country) => (\r\n              <CountryCard\r\n                clickHandler={this.clickHandler}\r\n                showFullInfo={showFullInfo}\r\n                key={country.cca3}\r\n                country={country}\r\n                code={current}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}